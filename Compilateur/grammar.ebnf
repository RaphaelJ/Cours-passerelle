(* Grammaire d'un langage semblable au langage C ANSI mais avec des
 * fonctionnalités (très largement) limitées pour le cours INFO-0085.
 * La grammaire est fortement inspirée de celle de l'annexe A13 de "The C
 * programming language" par Brian Kernighan et Dennis Ritchie, seconde édition
 * de 1988.
 * Les caractères d'espacement entre les tokens sont implicites dans la
 * définition de cette grammaire.
 * 
 * Février 2013, Raphael Javaux (s114483, année préparatoire)
 *)

program = { variable-decl | function-def }

(* Définit la déclaration et l'initialisation d'une variable. *)
variable-decl = type-qual, type-array-spec, identifier, [ '=', expr ], ';'

(* Définit la déclaration et/ou la définition d'une fonction.
 * Ne permet pas de retourner un tableau. *)
function-def = [ type-spec ], identifier, '(', arguments-list, ')'
             , (compound-stmt | ';')

arguments-list = argument-decl | (argument-decl, ',' arguments-list)

(* Déclaration d'un argument d'une fonction. Autorise l'omission de la taille
 * pour la dernière dimension des tableaux ainsi que le nom donné à l'argument.
 *)
argument-decl = type-qual, type-array-spec, [ "[]" ], [ identifier ]

(* Types des variables.
 * Contrairement au C, la déclaration d'un tableau se fait au niveau du type
 * et non de l'identifieur (comme en C#). *)
type-array-spec = type-spec, { '[', integer-litteral, ']' }

(* Types des variables sans possibilité de définir un tableau. *)
type-spec = "int" | "float" | "bool"

type-qual = "const"

(* Contrairement au C, tous les blocs de code doivent être délimités par des
 * crochets. Ceci enlève l'ambiguïté qui existe lorsqu'un compilateur C parse
 * deux "if"-"else" imbriqués dont les corps ne sont pas délimités par des
 * crochets. *)
compound-stmt = '{', { stmt }, '}'

stmt = variable-decl | variable-assign
     | (expr, ';')
     | ("if", condition, compound-stmt
       , [ "else", compound-stmt ])
     | ("while", condition, compound-stmt)
     | ("return", [ expr ], ';')
     | ';'

(* Utilisé comme garde pour les structures de controle "if" et "while". *)
condition = '(', bool-expr, ')'

(* Mutation d'une variable/d'un tableau. *)
variable-assign = assignable-expr, '=', expr, ';'

(* Opérateurs binaires. Applique la même priorité des opérateurs que celle
 * du langage C. Les opérateurs sont associatifs sur leur gauche. *)

expr = and-expr | (expr, "||", and-expr)

and-expr = comparison-expr | (and-expr, "&&", comparison-expr)

comparison-expr = (numeric-expr, "==", numeric-expr)
                | (numeric-expr, "!=", numeric-expr)
                | (numeric-expr, '<', numeric-expr)
                | (numeric-expr, '>', numeric-expr)
                | (numeric-expr, "<=", numeric-expr)
                | (numeric-expr, ">=", numeric-expr)

numeric-expr = multiplicative-expr
             | (numeric-expr, '+', multiplicative-expr)
             | (numeric-expr, '-', multiplicative-expr)

multiplicative-expr = value-expr
                    | (multiplicative-expr, '*', value-expr)
                    | (multiplicative-expr, '/', value-expr)
                    | (multiplicative-expr, '%', value-expr)

(* Référence une constante, une variable, le résultat de l'appel d'une fonction
 * ou un élément d'un tableau. *)
value-expr = litteral | assignable-expr
           | (identifier, '(', expr-list, ')')
           | ('(', expr, ')')

(* Référence une expression qui peut être placée à gauche d'une assignation. *)
assignable-expr = identifier
                | (assignable-expr, '[', numeric-expr, ']')

expr-list = expr | (expr, ',', expr-list)

(* Noms des variables et des fonctions. *)
identifier = letter, { letter | digit }

litteral = numeric-litteral | bool-litteral

numeric-litteral = ['+' | '-'], (integer-litteral | float-litteral)

bool-litteral = "true" | "false"

integer-litteral = digit, { digit }

float-litteral = integer-litteral, '.', integer-litteral

digit = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'

letter = 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L'
       | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X'
       | 'Y' | 'Z' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j'
       | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v'
       | 'w' | 'x' | 'y' | 'z'
