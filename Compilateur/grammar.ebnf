(* Grammaire d'un langage semblable au langage C ANSI mais avec des
 * fonctionnalités (très largement) limitées pour le cours INFO-0085.
 * La grammaire est fortement inspirée de celle de l'annexe A13 de "The C
 * programming language" par Brian Kernighan et Dennis Ritchie, seconde édition
 * de 1988.
 * Les caractères d'espacement entre les tokens sont implicites dans la
 * définition de cette grammaire.
 * 
 * Février 2013, Raphael Javaux (s114483, année préparatoire)
 *)
 
program = { variable-declaration | function }

(* Définit la déclaration et l'initialisation d'une variable.
 * Contrairement au C, une variable doit toujours être initialisée. *)
variable-declaration = declarator-var, '=', expression, ';'

(* Déclaration d'un nom et d'un type d'une variable *)
declarator-var = [ "const" ], type-array-spec, identifier

(* Définit la déclaration et/ou la définition d'une fonction.
 * Ne permet pas de retourner un tableau. *)
function = type-spec, identifier, '(', function-args, ')'
         , (compound-statement | ';')

function-args = declarator-arg | (declarator-arg, ',' function-args)

(* Déclaration d'un argument d'une fonction. Autorise l'omission de la taille 
 * pour la dernière dimension des tableaux ainsi que le nom donné à l'argument. 
 *)
declarator-arg = [ "const" ], type-array-spec, [ "[]" ], [ identifier ]

(* Types des variables.
 * Contrairement au C, la déclaration d'un tableau se fait au niveau du type
 * et non de l'identifieur (comme en C#). *)
type-array-spec = type-spec, { '[', integer-litteral, ']' }

type-spec = "char" | "int" | "float"

(* Contrairement au C, tous les blocs de code doivent être délimités par des
 * crochets. Ceci enlève l'ambiguïté qui existe lorsqu'un compilateur C parse
 * deux "if"-"else" imbriqués dont les corps ne sont pas délimités par des
 * crochets. *)
compound-statement = '{', { statement }, '}'

statement = variable-declaration
          | assignment-expression
          | (expression, ';')
          | ("if", condition, compound-statement
             , [ "else", compound-statement ])
          | ("while", condition, compound-statement)
          | ("return", [ expression ], ';')
          | ';'

(* Utilisé comme garde pour les structures de controle "if" et "while". *)
condition = '(', expression, ')'

(* Mutation d'une variable/d'un tableau. *)
assignment-expression = postfix-expression, '=', expression, ';'

(* Opérateurs binaires. Applique la même priorité des opérateurs que celle
 * du langage C *)

expression = and-expression
           | (expression, "||", and-expression)

and-expression = equality-expression
               | (and-expression, "&&", equality-expression)

equality-expression = bool-expression
                    | (equality-expression, "==", relational-expression)
                    | (equality-expression, "!=", relational-expression)

bool-expression = relational-expression | "true" | "false"

relational-expression = additive-expression
                      | (relational-expression, '<', additive-expression)
                      | (relational-expression, '>', additive-expression)
                      | (relational-expression, '<=', additive-expression)
                      | (relational-expression, '>=', additive-expression)

additive-expression = multiplicative-expression
                    | (additive-expression, '+', multiplicative-expression)
                    | (additive-expression, '-', multiplicative-expression)

multiplicative-expression = primary-expression
                          | (multiplicative-expression, '*', primary-expression)
                          | (multiplicative-expression, '/', primary-expression)
                          | (multiplicative-expression, '%', primary-expression)

primary-expression = array-expression | litteral | ('(', expression, ')')

(* Référence un élément d'un tableau. *)
array-expression = function-expression, { '[', expression, ']' }

(* Référence une variable ou le résultat de l'appel d'une fonction. *)
function-expression = identifier | (identifier, '(', expression-list, ')')

expression-list = expression | (expression, ',', expression-list)

(* Noms des variables et des fonctions. *)
identifier = letter, { letter | digit }

litteral = string-litteral | number-litteral

string-litteral = '"', { (letter | digit | space) }, '"'

number-litteral = integer-litteral | float-litteral

integer-litteral = digit, { digit }

float-litteral = integer-litteral, '.', integer-litteral

digit = '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'

letter = 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L'
       | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X'
       | 'Y' | 'Z' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j'
       | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v'
       | 'w' | 'x' | 'y' | 'z' | '_'

white-space = ' ' | '\n' | '\t'
